# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from personio_data_python_sdk import schemas  # noqa: F401


class CreateTimeOffPeriodRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "end_date",
            "half_day_end",
            "half_day_start",
            "time_off_type_id",
            "employee_id",
            "start_date",
        }
        
        class properties:
            employee_id = schemas.IntSchema
            time_off_type_id = schemas.IntSchema
            start_date = schemas.DateSchema
            end_date = schemas.DateSchema
            half_day_start = schemas.BoolSchema
            half_day_end = schemas.BoolSchema
            comment = schemas.StrSchema
            skip_approval = schemas.BoolSchema
            __annotations__ = {
                "employee_id": employee_id,
                "time_off_type_id": time_off_type_id,
                "start_date": start_date,
                "end_date": end_date,
                "half_day_start": half_day_start,
                "half_day_end": half_day_end,
                "comment": comment,
                "skip_approval": skip_approval,
            }
    
    end_date: MetaOapg.properties.end_date
    half_day_end: MetaOapg.properties.half_day_end
    half_day_start: MetaOapg.properties.half_day_start
    time_off_type_id: MetaOapg.properties.time_off_type_id
    employee_id: MetaOapg.properties.employee_id
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_id"]) -> MetaOapg.properties.employee_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_off_type_id"]) -> MetaOapg.properties.time_off_type_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["half_day_start"]) -> MetaOapg.properties.half_day_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["half_day_end"]) -> MetaOapg.properties.half_day_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skip_approval"]) -> MetaOapg.properties.skip_approval: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employee_id", "time_off_type_id", "start_date", "end_date", "half_day_start", "half_day_end", "comment", "skip_approval", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_id"]) -> MetaOapg.properties.employee_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_off_type_id"]) -> MetaOapg.properties.time_off_type_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["half_day_start"]) -> MetaOapg.properties.half_day_start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["half_day_end"]) -> MetaOapg.properties.half_day_end: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skip_approval"]) -> typing.Union[MetaOapg.properties.skip_approval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employee_id", "time_off_type_id", "start_date", "end_date", "half_day_start", "half_day_end", "comment", "skip_approval", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        end_date: typing.Union[MetaOapg.properties.end_date, str, date, ],
        half_day_end: typing.Union[MetaOapg.properties.half_day_end, bool, ],
        half_day_start: typing.Union[MetaOapg.properties.half_day_start, bool, ],
        time_off_type_id: typing.Union[MetaOapg.properties.time_off_type_id, decimal.Decimal, int, ],
        employee_id: typing.Union[MetaOapg.properties.employee_id, decimal.Decimal, int, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, date, ],
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        skip_approval: typing.Union[MetaOapg.properties.skip_approval, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateTimeOffPeriodRequest':
        return super().__new__(
            cls,
            *args,
            end_date=end_date,
            half_day_end=half_day_end,
            half_day_start=half_day_start,
            time_off_type_id=time_off_type_id,
            employee_id=employee_id,
            start_date=start_date,
            comment=comment,
            skip_approval=skip_approval,
            _configuration=_configuration,
            **kwargs,
        )
