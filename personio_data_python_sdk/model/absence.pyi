# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from personio_data_python_sdk import schemas  # noqa: F401


class Absence(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            status = schemas.StrSchema
            start_date = schemas.StrSchema
            end_date = schemas.StrSchema
            days_count = schemas.NumberSchema
            half_day_start = schemas.BoolSchema
            half_day_end = schemas.BoolSchema
        
            @staticmethod
            def time_off_type() -> typing.Type['AbsenceTimeOffType']:
                return AbsenceTimeOffType
        
            @staticmethod
            def employee() -> typing.Type['ShortEmployee']:
                return ShortEmployee
        
            @staticmethod
            def certificate() -> typing.Type['AbsenceCertificate']:
                return AbsenceCertificate
            created_at = schemas.StrSchema
            created_by = schemas.StrSchema
            updated_at = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "status": status,
                "start_date": start_date,
                "end_date": end_date,
                "days_count": days_count,
                "half_day_start": half_day_start,
                "half_day_end": half_day_end,
                "time_off_type": time_off_type,
                "employee": employee,
                "certificate": certificate,
                "created_at": created_at,
                "created_by": created_by,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_count"]) -> MetaOapg.properties.days_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["half_day_start"]) -> MetaOapg.properties.half_day_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["half_day_end"]) -> MetaOapg.properties.half_day_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_off_type"]) -> 'AbsenceTimeOffType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'ShortEmployee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificate"]) -> 'AbsenceCertificate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "start_date", "end_date", "days_count", "half_day_start", "half_day_end", "time_off_type", "employee", "certificate", "created_at", "created_by", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_count"]) -> typing.Union[MetaOapg.properties.days_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["half_day_start"]) -> typing.Union[MetaOapg.properties.half_day_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["half_day_end"]) -> typing.Union[MetaOapg.properties.half_day_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_off_type"]) -> typing.Union['AbsenceTimeOffType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> typing.Union['ShortEmployee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificate"]) -> typing.Union['AbsenceCertificate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "start_date", "end_date", "days_count", "half_day_start", "half_day_end", "time_off_type", "employee", "certificate", "created_at", "created_by", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, schemas.Unset] = schemas.unset,
        end_date: typing.Union[MetaOapg.properties.end_date, str, schemas.Unset] = schemas.unset,
        days_count: typing.Union[MetaOapg.properties.days_count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        half_day_start: typing.Union[MetaOapg.properties.half_day_start, bool, schemas.Unset] = schemas.unset,
        half_day_end: typing.Union[MetaOapg.properties.half_day_end, bool, schemas.Unset] = schemas.unset,
        time_off_type: typing.Union['AbsenceTimeOffType', schemas.Unset] = schemas.unset,
        employee: typing.Union['ShortEmployee', schemas.Unset] = schemas.unset,
        certificate: typing.Union['AbsenceCertificate', schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        created_by: typing.Union[MetaOapg.properties.created_by, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Absence':
        return super().__new__(
            cls,
            *args,
            id=id,
            status=status,
            start_date=start_date,
            end_date=end_date,
            days_count=days_count,
            half_day_start=half_day_start,
            half_day_end=half_day_end,
            time_off_type=time_off_type,
            employee=employee,
            certificate=certificate,
            created_at=created_at,
            created_by=created_by,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )

from personio_data_python_sdk.model.absence_certificate import AbsenceCertificate
from personio_data_python_sdk.model.absence_time_off_type import AbsenceTimeOffType
from personio_data_python_sdk.model.short_employee import ShortEmployee
