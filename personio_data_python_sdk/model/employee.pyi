# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from personio_data_python_sdk import schemas  # noqa: F401


class Employee(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def id() -> typing.Type['EmployeeId']:
                return EmployeeId
        
            @staticmethod
            def first_name() -> typing.Type['EmployeeFirstName']:
                return EmployeeFirstName
        
            @staticmethod
            def last_name() -> typing.Type['EmployeeLastName']:
                return EmployeeLastName
        
            @staticmethod
            def preferred_name() -> typing.Type['EmployeePreferredName']:
                return EmployeePreferredName
        
            @staticmethod
            def email() -> typing.Type['EmployeeEmail']:
                return EmployeeEmail
        
            @staticmethod
            def gender() -> typing.Type['EmployeeGender']:
                return EmployeeGender
        
            @staticmethod
            def status() -> typing.Type['EmployeeStatus']:
                return EmployeeStatus
        
            @staticmethod
            def position() -> typing.Type['EmployeePosition']:
                return EmployeePosition
        
            @staticmethod
            def supervisor() -> typing.Type['Supervisor']:
                return Supervisor
        
            @staticmethod
            def employment_type() -> typing.Type['EmployeeEmploymentType']:
                return EmployeeEmploymentType
        
            @staticmethod
            def weekly_working_hours() -> typing.Type['EmployeeWeeklyWorkingHours']:
                return EmployeeWeeklyWorkingHours
        
            @staticmethod
            def hire_date() -> typing.Type['EmployeeHireDate']:
                return EmployeeHireDate
        
            @staticmethod
            def contract_end_date() -> typing.Type['EmployeeContractEndDate']:
                return EmployeeContractEndDate
        
            @staticmethod
            def termination_date() -> typing.Type['EmployeeTerminationDate']:
                return EmployeeTerminationDate
        
            @staticmethod
            def termination_type() -> typing.Type['EmployeeTerminationType']:
                return EmployeeTerminationType
        
            @staticmethod
            def termination_reason() -> typing.Type['EmployeeTerminationReason']:
                return EmployeeTerminationReason
        
            @staticmethod
            def probation_period_end() -> typing.Type['EmployeeProbationPeriodEnd']:
                return EmployeeProbationPeriodEnd
        
            @staticmethod
            def created_at() -> typing.Type['EmployeeCreatedAt']:
                return EmployeeCreatedAt
        
            @staticmethod
            def last_modified_at() -> typing.Type['EmployeeLastModifiedAt']:
                return EmployeeLastModifiedAt
        
            @staticmethod
            def subcompany() -> typing.Type['Office']:
                return Office
        
            @staticmethod
            def office() -> typing.Type['Office']:
                return Office
        
            @staticmethod
            def department() -> typing.Type['Department']:
                return Department
        
            @staticmethod
            def cost_centers() -> typing.Type['CostCenters']:
                return CostCenters
        
            @staticmethod
            def holiday_calendar() -> typing.Type['HolidayCalendar']:
                return HolidayCalendar
        
            @staticmethod
            def work_schedule() -> typing.Type['WorkSchedule']:
                return WorkSchedule
        
            @staticmethod
            def absence_entitlement() -> typing.Type['AbsenceEntitlement']:
                return AbsenceEntitlement
        
            @staticmethod
            def team() -> typing.Type['Team']:
                return Team
        
            @staticmethod
            def fix_salary() -> typing.Type['EmployeeFixSalary']:
                return EmployeeFixSalary
        
            @staticmethod
            def fix_salary_interval() -> typing.Type['EmployeeFixSalaryInterval']:
                return EmployeeFixSalaryInterval
        
            @staticmethod
            def hourly_salary() -> typing.Type['EmployeeHourlySalary']:
                return EmployeeHourlySalary
        
            @staticmethod
            def vacation_day_balance() -> typing.Type['EmployeeVacationDayBalance']:
                return EmployeeVacationDayBalance
        
            @staticmethod
            def last_working_day() -> typing.Type['EmployeeLastWorkingDay']:
                return EmployeeLastWorkingDay
        
            @staticmethod
            def profile_picture() -> typing.Type['EmployeeProfilePicture']:
                return EmployeeProfilePicture
        
            @staticmethod
            def dynamic_21827() -> typing.Type['EmployeeDynamic21827']:
                return EmployeeDynamic21827
            __annotations__ = {
                "id": id,
                "first_name": first_name,
                "last_name": last_name,
                "preferred_name": preferred_name,
                "email": email,
                "gender": gender,
                "status": status,
                "position": position,
                "supervisor": supervisor,
                "employment_type": employment_type,
                "weekly_working_hours": weekly_working_hours,
                "hire_date": hire_date,
                "contract_end_date": contract_end_date,
                "termination_date": termination_date,
                "termination_type": termination_type,
                "termination_reason": termination_reason,
                "probation_period_end": probation_period_end,
                "created_at": created_at,
                "last_modified_at": last_modified_at,
                "subcompany": subcompany,
                "office": office,
                "department": department,
                "cost_centers": cost_centers,
                "holiday_calendar": holiday_calendar,
                "work_schedule": work_schedule,
                "absence_entitlement": absence_entitlement,
                "team": team,
                "fix_salary": fix_salary,
                "fix_salary_interval": fix_salary_interval,
                "hourly_salary": hourly_salary,
                "vacation_day_balance": vacation_day_balance,
                "last_working_day": last_working_day,
                "profile_picture": profile_picture,
                "dynamic_21827": dynamic_21827,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'EmployeeId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> 'EmployeeFirstName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> 'EmployeeLastName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_name"]) -> 'EmployeePreferredName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'EmployeeEmail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> 'EmployeeGender': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'EmployeeStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> 'EmployeePosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisor"]) -> 'Supervisor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_type"]) -> 'EmployeeEmploymentType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weekly_working_hours"]) -> 'EmployeeWeeklyWorkingHours': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hire_date"]) -> 'EmployeeHireDate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_end_date"]) -> 'EmployeeContractEndDate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_date"]) -> 'EmployeeTerminationDate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_type"]) -> 'EmployeeTerminationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_reason"]) -> 'EmployeeTerminationReason': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probation_period_end"]) -> 'EmployeeProbationPeriodEnd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> 'EmployeeCreatedAt': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified_at"]) -> 'EmployeeLastModifiedAt': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subcompany"]) -> 'Office': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["office"]) -> 'Office': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> 'Department': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_centers"]) -> 'CostCenters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holiday_calendar"]) -> 'HolidayCalendar': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_schedule"]) -> 'WorkSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["absence_entitlement"]) -> 'AbsenceEntitlement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'Team': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fix_salary"]) -> 'EmployeeFixSalary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fix_salary_interval"]) -> 'EmployeeFixSalaryInterval': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly_salary"]) -> 'EmployeeHourlySalary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacation_day_balance"]) -> 'EmployeeVacationDayBalance': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_working_day"]) -> 'EmployeeLastWorkingDay': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile_picture"]) -> 'EmployeeProfilePicture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynamic_21827"]) -> 'EmployeeDynamic21827': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "first_name", "last_name", "preferred_name", "email", "gender", "status", "position", "supervisor", "employment_type", "weekly_working_hours", "hire_date", "contract_end_date", "termination_date", "termination_type", "termination_reason", "probation_period_end", "created_at", "last_modified_at", "subcompany", "office", "department", "cost_centers", "holiday_calendar", "work_schedule", "absence_entitlement", "team", "fix_salary", "fix_salary_interval", "hourly_salary", "vacation_day_balance", "last_working_day", "profile_picture", "dynamic_21827", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['EmployeeId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union['EmployeeFirstName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union['EmployeeLastName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_name"]) -> typing.Union['EmployeePreferredName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union['EmployeeEmail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union['EmployeeGender', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['EmployeeStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union['EmployeePosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisor"]) -> typing.Union['Supervisor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_type"]) -> typing.Union['EmployeeEmploymentType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weekly_working_hours"]) -> typing.Union['EmployeeWeeklyWorkingHours', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hire_date"]) -> typing.Union['EmployeeHireDate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_end_date"]) -> typing.Union['EmployeeContractEndDate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_date"]) -> typing.Union['EmployeeTerminationDate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_type"]) -> typing.Union['EmployeeTerminationType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_reason"]) -> typing.Union['EmployeeTerminationReason', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probation_period_end"]) -> typing.Union['EmployeeProbationPeriodEnd', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union['EmployeeCreatedAt', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified_at"]) -> typing.Union['EmployeeLastModifiedAt', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subcompany"]) -> typing.Union['Office', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["office"]) -> typing.Union['Office', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union['Department', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_centers"]) -> typing.Union['CostCenters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holiday_calendar"]) -> typing.Union['HolidayCalendar', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_schedule"]) -> typing.Union['WorkSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["absence_entitlement"]) -> typing.Union['AbsenceEntitlement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['Team', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fix_salary"]) -> typing.Union['EmployeeFixSalary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fix_salary_interval"]) -> typing.Union['EmployeeFixSalaryInterval', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly_salary"]) -> typing.Union['EmployeeHourlySalary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacation_day_balance"]) -> typing.Union['EmployeeVacationDayBalance', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_working_day"]) -> typing.Union['EmployeeLastWorkingDay', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile_picture"]) -> typing.Union['EmployeeProfilePicture', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynamic_21827"]) -> typing.Union['EmployeeDynamic21827', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "first_name", "last_name", "preferred_name", "email", "gender", "status", "position", "supervisor", "employment_type", "weekly_working_hours", "hire_date", "contract_end_date", "termination_date", "termination_type", "termination_reason", "probation_period_end", "created_at", "last_modified_at", "subcompany", "office", "department", "cost_centers", "holiday_calendar", "work_schedule", "absence_entitlement", "team", "fix_salary", "fix_salary_interval", "hourly_salary", "vacation_day_balance", "last_working_day", "profile_picture", "dynamic_21827", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union['EmployeeId', schemas.Unset] = schemas.unset,
        first_name: typing.Union['EmployeeFirstName', schemas.Unset] = schemas.unset,
        last_name: typing.Union['EmployeeLastName', schemas.Unset] = schemas.unset,
        preferred_name: typing.Union['EmployeePreferredName', schemas.Unset] = schemas.unset,
        email: typing.Union['EmployeeEmail', schemas.Unset] = schemas.unset,
        gender: typing.Union['EmployeeGender', schemas.Unset] = schemas.unset,
        status: typing.Union['EmployeeStatus', schemas.Unset] = schemas.unset,
        position: typing.Union['EmployeePosition', schemas.Unset] = schemas.unset,
        supervisor: typing.Union['Supervisor', schemas.Unset] = schemas.unset,
        employment_type: typing.Union['EmployeeEmploymentType', schemas.Unset] = schemas.unset,
        weekly_working_hours: typing.Union['EmployeeWeeklyWorkingHours', schemas.Unset] = schemas.unset,
        hire_date: typing.Union['EmployeeHireDate', schemas.Unset] = schemas.unset,
        contract_end_date: typing.Union['EmployeeContractEndDate', schemas.Unset] = schemas.unset,
        termination_date: typing.Union['EmployeeTerminationDate', schemas.Unset] = schemas.unset,
        termination_type: typing.Union['EmployeeTerminationType', schemas.Unset] = schemas.unset,
        termination_reason: typing.Union['EmployeeTerminationReason', schemas.Unset] = schemas.unset,
        probation_period_end: typing.Union['EmployeeProbationPeriodEnd', schemas.Unset] = schemas.unset,
        created_at: typing.Union['EmployeeCreatedAt', schemas.Unset] = schemas.unset,
        last_modified_at: typing.Union['EmployeeLastModifiedAt', schemas.Unset] = schemas.unset,
        subcompany: typing.Union['Office', schemas.Unset] = schemas.unset,
        office: typing.Union['Office', schemas.Unset] = schemas.unset,
        department: typing.Union['Department', schemas.Unset] = schemas.unset,
        cost_centers: typing.Union['CostCenters', schemas.Unset] = schemas.unset,
        holiday_calendar: typing.Union['HolidayCalendar', schemas.Unset] = schemas.unset,
        work_schedule: typing.Union['WorkSchedule', schemas.Unset] = schemas.unset,
        absence_entitlement: typing.Union['AbsenceEntitlement', schemas.Unset] = schemas.unset,
        team: typing.Union['Team', schemas.Unset] = schemas.unset,
        fix_salary: typing.Union['EmployeeFixSalary', schemas.Unset] = schemas.unset,
        fix_salary_interval: typing.Union['EmployeeFixSalaryInterval', schemas.Unset] = schemas.unset,
        hourly_salary: typing.Union['EmployeeHourlySalary', schemas.Unset] = schemas.unset,
        vacation_day_balance: typing.Union['EmployeeVacationDayBalance', schemas.Unset] = schemas.unset,
        last_working_day: typing.Union['EmployeeLastWorkingDay', schemas.Unset] = schemas.unset,
        profile_picture: typing.Union['EmployeeProfilePicture', schemas.Unset] = schemas.unset,
        dynamic_21827: typing.Union['EmployeeDynamic21827', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Employee':
        return super().__new__(
            cls,
            *args,
            id=id,
            first_name=first_name,
            last_name=last_name,
            preferred_name=preferred_name,
            email=email,
            gender=gender,
            status=status,
            position=position,
            supervisor=supervisor,
            employment_type=employment_type,
            weekly_working_hours=weekly_working_hours,
            hire_date=hire_date,
            contract_end_date=contract_end_date,
            termination_date=termination_date,
            termination_type=termination_type,
            termination_reason=termination_reason,
            probation_period_end=probation_period_end,
            created_at=created_at,
            last_modified_at=last_modified_at,
            subcompany=subcompany,
            office=office,
            department=department,
            cost_centers=cost_centers,
            holiday_calendar=holiday_calendar,
            work_schedule=work_schedule,
            absence_entitlement=absence_entitlement,
            team=team,
            fix_salary=fix_salary,
            fix_salary_interval=fix_salary_interval,
            hourly_salary=hourly_salary,
            vacation_day_balance=vacation_day_balance,
            last_working_day=last_working_day,
            profile_picture=profile_picture,
            dynamic_21827=dynamic_21827,
            _configuration=_configuration,
            **kwargs,
        )

from personio_data_python_sdk.model.absence_entitlement import AbsenceEntitlement
from personio_data_python_sdk.model.cost_centers import CostCenters
from personio_data_python_sdk.model.department import Department
from personio_data_python_sdk.model.employee_contract_end_date import EmployeeContractEndDate
from personio_data_python_sdk.model.employee_created_at import EmployeeCreatedAt
from personio_data_python_sdk.model.employee_dynamic21827 import EmployeeDynamic21827
from personio_data_python_sdk.model.employee_email import EmployeeEmail
from personio_data_python_sdk.model.employee_employment_type import EmployeeEmploymentType
from personio_data_python_sdk.model.employee_first_name import EmployeeFirstName
from personio_data_python_sdk.model.employee_fix_salary import EmployeeFixSalary
from personio_data_python_sdk.model.employee_fix_salary_interval import EmployeeFixSalaryInterval
from personio_data_python_sdk.model.employee_gender import EmployeeGender
from personio_data_python_sdk.model.employee_hire_date import EmployeeHireDate
from personio_data_python_sdk.model.employee_hourly_salary import EmployeeHourlySalary
from personio_data_python_sdk.model.employee_id import EmployeeId
from personio_data_python_sdk.model.employee_last_modified_at import EmployeeLastModifiedAt
from personio_data_python_sdk.model.employee_last_name import EmployeeLastName
from personio_data_python_sdk.model.employee_last_working_day import EmployeeLastWorkingDay
from personio_data_python_sdk.model.employee_position import EmployeePosition
from personio_data_python_sdk.model.employee_preferred_name import EmployeePreferredName
from personio_data_python_sdk.model.employee_probation_period_end import EmployeeProbationPeriodEnd
from personio_data_python_sdk.model.employee_profile_picture import EmployeeProfilePicture
from personio_data_python_sdk.model.employee_status import EmployeeStatus
from personio_data_python_sdk.model.employee_termination_date import EmployeeTerminationDate
from personio_data_python_sdk.model.employee_termination_reason import EmployeeTerminationReason
from personio_data_python_sdk.model.employee_termination_type import EmployeeTerminationType
from personio_data_python_sdk.model.employee_vacation_day_balance import EmployeeVacationDayBalance
from personio_data_python_sdk.model.employee_weekly_working_hours import EmployeeWeeklyWorkingHours
from personio_data_python_sdk.model.holiday_calendar import HolidayCalendar
from personio_data_python_sdk.model.office import Office
from personio_data_python_sdk.model.supervisor import Supervisor
from personio_data_python_sdk.model.team import Team
from personio_data_python_sdk.model.work_schedule import WorkSchedule
