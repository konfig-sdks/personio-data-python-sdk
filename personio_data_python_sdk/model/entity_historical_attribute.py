# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from personio_data_python_sdk import schemas  # noqa: F401


class EntityHistoricalAttribute(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            attribute_id = schemas.StrSchema
            entity_id = schemas.StrSchema
            
            
            class data_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ENTITY": "ENTITY",
                    }
                
                @schemas.classproperty
                def ENTITY(cls):
                    return cls("ENTITY")
            value = schemas.StrSchema
            employee_id = schemas.IntSchema
            effective_date = schemas.StrSchema
            __annotations__ = {
                "attribute_id": attribute_id,
                "entity_id": entity_id,
                "data_type": data_type,
                "value": value,
                "employee_id": employee_id,
                "effective_date": effective_date,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_id"]) -> MetaOapg.properties.attribute_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_id"]) -> MetaOapg.properties.entity_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_type"]) -> MetaOapg.properties.data_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_id"]) -> MetaOapg.properties.employee_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_date"]) -> MetaOapg.properties.effective_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attribute_id", "entity_id", "data_type", "value", "employee_id", "effective_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_id"]) -> typing.Union[MetaOapg.properties.attribute_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_id"]) -> typing.Union[MetaOapg.properties.entity_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_type"]) -> typing.Union[MetaOapg.properties.data_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_id"]) -> typing.Union[MetaOapg.properties.employee_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_date"]) -> typing.Union[MetaOapg.properties.effective_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attribute_id", "entity_id", "data_type", "value", "employee_id", "effective_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        attribute_id: typing.Union[MetaOapg.properties.attribute_id, str, schemas.Unset] = schemas.unset,
        entity_id: typing.Union[MetaOapg.properties.entity_id, str, schemas.Unset] = schemas.unset,
        data_type: typing.Union[MetaOapg.properties.data_type, str, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        employee_id: typing.Union[MetaOapg.properties.employee_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        effective_date: typing.Union[MetaOapg.properties.effective_date, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EntityHistoricalAttribute':
        return super().__new__(
            cls,
            *args,
            attribute_id=attribute_id,
            entity_id=entity_id,
            data_type=data_type,
            value=value,
            employee_id=employee_id,
            effective_date=effective_date,
            _configuration=_configuration,
            **kwargs,
        )
