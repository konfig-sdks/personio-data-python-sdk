# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from personio_data_python_sdk import schemas  # noqa: F401


class ShortEmployeeAttributes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def id() -> typing.Type['ShortEmployeeAttributesId']:
                return ShortEmployeeAttributesId
        
            @staticmethod
            def first_name() -> typing.Type['ShortEmployeeAttributesFirstName']:
                return ShortEmployeeAttributesFirstName
        
            @staticmethod
            def last_name() -> typing.Type['ShortEmployeeAttributesLastName']:
                return ShortEmployeeAttributesLastName
        
            @staticmethod
            def email() -> typing.Type['ShortEmployeeAttributesEmail']:
                return ShortEmployeeAttributesEmail
            __annotations__ = {
                "id": id,
                "first_name": first_name,
                "last_name": last_name,
                "email": email,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'ShortEmployeeAttributesId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> 'ShortEmployeeAttributesFirstName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> 'ShortEmployeeAttributesLastName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'ShortEmployeeAttributesEmail': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "first_name", "last_name", "email", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['ShortEmployeeAttributesId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union['ShortEmployeeAttributesFirstName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union['ShortEmployeeAttributesLastName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union['ShortEmployeeAttributesEmail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "first_name", "last_name", "email", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union['ShortEmployeeAttributesId', schemas.Unset] = schemas.unset,
        first_name: typing.Union['ShortEmployeeAttributesFirstName', schemas.Unset] = schemas.unset,
        last_name: typing.Union['ShortEmployeeAttributesLastName', schemas.Unset] = schemas.unset,
        email: typing.Union['ShortEmployeeAttributesEmail', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShortEmployeeAttributes':
        return super().__new__(
            cls,
            *args,
            id=id,
            first_name=first_name,
            last_name=last_name,
            email=email,
            _configuration=_configuration,
            **kwargs,
        )

from personio_data_python_sdk.model.short_employee_attributes_email import ShortEmployeeAttributesEmail
from personio_data_python_sdk.model.short_employee_attributes_first_name import ShortEmployeeAttributesFirstName
from personio_data_python_sdk.model.short_employee_attributes_id import ShortEmployeeAttributesId
from personio_data_python_sdk.model.short_employee_attributes_last_name import ShortEmployeeAttributesLastName
