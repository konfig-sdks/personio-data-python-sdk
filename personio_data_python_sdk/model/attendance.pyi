# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from personio_data_python_sdk import schemas  # noqa: F401


class Attendance(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employee = schemas.IntSchema
            date = schemas.DateSchema
            
            
            class start_time(
                schemas.StrSchema
            ):
                pass
            
            
            class end_time(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'end_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            _break = schemas.IntSchema
            comment = schemas.StrSchema
            is_holiday = schemas.BoolSchema
            is_on_time_off = schemas.BoolSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CONFIRMED(cls):
                    return cls("confirmed")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("rejected")
        
            @staticmethod
            def project() -> typing.Type['AttendanceProject']:
                return AttendanceProject
            __annotations__ = {
                "employee": employee,
                "date": date,
                "start_time": start_time,
                "end_time": end_time,
                "break": _break,
                "comment": comment,
                "is_holiday": is_holiday,
                "is_on_time_off": is_on_time_off,
                "status": status,
                "project": project,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> MetaOapg.properties.employee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["break"]) -> MetaOapg.properties._break: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_holiday"]) -> MetaOapg.properties.is_holiday: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_on_time_off"]) -> MetaOapg.properties.is_on_time_off: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'AttendanceProject': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employee", "date", "start_time", "end_time", "break", "comment", "is_holiday", "is_on_time_off", "status", "project", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> typing.Union[MetaOapg.properties.employee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["break"]) -> typing.Union[MetaOapg.properties._break, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_holiday"]) -> typing.Union[MetaOapg.properties.is_holiday, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_on_time_off"]) -> typing.Union[MetaOapg.properties.is_on_time_off, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['AttendanceProject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employee", "date", "start_time", "end_time", "break", "comment", "is_holiday", "is_on_time_off", "status", "project", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employee: typing.Union[MetaOapg.properties.employee, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, None, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        is_holiday: typing.Union[MetaOapg.properties.is_holiday, bool, schemas.Unset] = schemas.unset,
        is_on_time_off: typing.Union[MetaOapg.properties.is_on_time_off, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        project: typing.Union['AttendanceProject', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Attendance':
        return super().__new__(
            cls,
            *args,
            employee=employee,
            date=date,
            start_time=start_time,
            end_time=end_time,
            comment=comment,
            is_holiday=is_holiday,
            is_on_time_off=is_on_time_off,
            status=status,
            project=project,
            _configuration=_configuration,
            **kwargs,
        )

from personio_data_python_sdk.model.attendance_project import AttendanceProject
