# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from personio_data_python_sdk import schemas  # noqa: F401


class HourlyAbsencePeriodResponseAttributes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "absence_type_id",
            "half_day_end",
            "half_day_start",
            "breakdowns",
            "origin",
            "certificate",
            "start",
            "created_at",
            "employee",
            "created_by",
            "updated_at",
            "effective_duration",
            "id",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            effective_duration = schemas.IntSchema
        
            @staticmethod
            def employee() -> typing.Type['ShortEmployee']:
                return ShortEmployee
        
            @staticmethod
            def absence_type_id() -> typing.Type['AbsenceType']:
                return AbsenceType
        
            @staticmethod
            def certificate() -> typing.Type['HourlyAbsencePeriodResponseAttributesCertificate']:
                return HourlyAbsencePeriodResponseAttributesCertificate
            start = schemas.DateTimeSchema
            half_day_start = schemas.BoolSchema
            half_day_end = schemas.BoolSchema
            
            
            class origin(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "web": "WEB",
                        "api": "API",
                        "mobile": "MOBILE",
                        "slack": "SLACK",
                        "msteams": "MSTEAMS",
                    }
                
                @schemas.classproperty
                def WEB(cls):
                    return cls("web")
                
                @schemas.classproperty
                def API(cls):
                    return cls("api")
                
                @schemas.classproperty
                def MOBILE(cls):
                    return cls("mobile")
                
                @schemas.classproperty
                def SLACK(cls):
                    return cls("slack")
                
                @schemas.classproperty
                def MSTEAMS(cls):
                    return cls("msteams")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origin':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            status = schemas.StrSchema
            created_by = schemas.IntSchema
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            
            
            class breakdowns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AbsencePeriodBreakdown']:
                        return AbsencePeriodBreakdown
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AbsencePeriodBreakdown'], typing.List['AbsencePeriodBreakdown']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'breakdowns':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AbsencePeriodBreakdown':
                    return super().__getitem__(i)
            
            
            class measurement_unit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "minutes": "MINUTES",
                    }
                
                @schemas.classproperty
                def MINUTES(cls):
                    return cls("minutes")
            
            
            class end(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'end':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            comment = schemas.StrSchema
            
            
            class approved_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "effective_duration": effective_duration,
                "employee": employee,
                "absence_type_id": absence_type_id,
                "certificate": certificate,
                "start": start,
                "half_day_start": half_day_start,
                "half_day_end": half_day_end,
                "origin": origin,
                "status": status,
                "created_by": created_by,
                "created_at": created_at,
                "updated_at": updated_at,
                "breakdowns": breakdowns,
                "measurement_unit": measurement_unit,
                "end": end,
                "comment": comment,
                "approved_at": approved_at,
            }
    
    absence_type_id: 'AbsenceType'
    half_day_end: MetaOapg.properties.half_day_end
    half_day_start: MetaOapg.properties.half_day_start
    breakdowns: MetaOapg.properties.breakdowns
    origin: MetaOapg.properties.origin
    certificate: 'HourlyAbsencePeriodResponseAttributesCertificate'
    start: MetaOapg.properties.start
    created_at: MetaOapg.properties.created_at
    employee: 'ShortEmployee'
    created_by: MetaOapg.properties.created_by
    updated_at: MetaOapg.properties.updated_at
    effective_duration: MetaOapg.properties.effective_duration
    id: MetaOapg.properties.id
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_duration"]) -> MetaOapg.properties.effective_duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'ShortEmployee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["absence_type_id"]) -> 'AbsenceType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificate"]) -> 'HourlyAbsencePeriodResponseAttributesCertificate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["half_day_start"]) -> MetaOapg.properties.half_day_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["half_day_end"]) -> MetaOapg.properties.half_day_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin"]) -> MetaOapg.properties.origin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breakdowns"]) -> MetaOapg.properties.breakdowns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measurement_unit"]) -> MetaOapg.properties.measurement_unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_at"]) -> MetaOapg.properties.approved_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "effective_duration", "employee", "absence_type_id", "certificate", "start", "half_day_start", "half_day_end", "origin", "status", "created_by", "created_at", "updated_at", "breakdowns", "measurement_unit", "end", "comment", "approved_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_duration"]) -> MetaOapg.properties.effective_duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> 'ShortEmployee': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["absence_type_id"]) -> 'AbsenceType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificate"]) -> 'HourlyAbsencePeriodResponseAttributesCertificate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["half_day_start"]) -> MetaOapg.properties.half_day_start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["half_day_end"]) -> MetaOapg.properties.half_day_end: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin"]) -> MetaOapg.properties.origin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breakdowns"]) -> MetaOapg.properties.breakdowns: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measurement_unit"]) -> typing.Union[MetaOapg.properties.measurement_unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_at"]) -> typing.Union[MetaOapg.properties.approved_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "effective_duration", "employee", "absence_type_id", "certificate", "start", "half_day_start", "half_day_end", "origin", "status", "created_by", "created_at", "updated_at", "breakdowns", "measurement_unit", "end", "comment", "approved_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        absence_type_id: 'AbsenceType',
        half_day_end: typing.Union[MetaOapg.properties.half_day_end, bool, ],
        half_day_start: typing.Union[MetaOapg.properties.half_day_start, bool, ],
        breakdowns: typing.Union[MetaOapg.properties.breakdowns, list, tuple, ],
        origin: typing.Union[MetaOapg.properties.origin, None, str, ],
        certificate: 'HourlyAbsencePeriodResponseAttributesCertificate',
        start: typing.Union[MetaOapg.properties.start, str, datetime, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        employee: 'ShortEmployee',
        created_by: typing.Union[MetaOapg.properties.created_by, decimal.Decimal, int, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, ],
        effective_duration: typing.Union[MetaOapg.properties.effective_duration, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        measurement_unit: typing.Union[MetaOapg.properties.measurement_unit, str, schemas.Unset] = schemas.unset,
        end: typing.Union[MetaOapg.properties.end, None, str, datetime, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        approved_at: typing.Union[MetaOapg.properties.approved_at, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HourlyAbsencePeriodResponseAttributes':
        return super().__new__(
            cls,
            *args,
            absence_type_id=absence_type_id,
            half_day_end=half_day_end,
            half_day_start=half_day_start,
            breakdowns=breakdowns,
            origin=origin,
            certificate=certificate,
            start=start,
            created_at=created_at,
            employee=employee,
            created_by=created_by,
            updated_at=updated_at,
            effective_duration=effective_duration,
            id=id,
            status=status,
            measurement_unit=measurement_unit,
            end=end,
            comment=comment,
            approved_at=approved_at,
            _configuration=_configuration,
            **kwargs,
        )

from personio_data_python_sdk.model.absence_period_breakdown import AbsencePeriodBreakdown
from personio_data_python_sdk.model.absence_type import AbsenceType
from personio_data_python_sdk.model.hourly_absence_period_response_attributes_certificate import HourlyAbsencePeriodResponseAttributesCertificate
from personio_data_python_sdk.model.short_employee import ShortEmployee
