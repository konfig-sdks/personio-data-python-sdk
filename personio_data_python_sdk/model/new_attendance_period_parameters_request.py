# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from personio_data_python_sdk import schemas  # noqa: F401


class NewAttendancePeriodParametersRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "attendances[][date]",
            "attendances[][start_time]",
            "attendances[]break",
            "attendances[][employee]",
        }
        
        class properties:
            attendances__employee = schemas.IntSchema
            attendances__date = schemas.DateSchema
            
            
            class attendances__start_time(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d\d:\d\d$',
                    }]
            
            
            class attendances_break(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 0
            
            
            class attendances__end_time(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d\d:\d\d$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attendances__end_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class attendances__comment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attendances__comment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            skip_approval = schemas.BoolSchema
            
            
            class project_id(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'project_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "attendances[][employee]": attendances__employee,
                "attendances[][date]": attendances__date,
                "attendances[][start_time]": attendances__start_time,
                "attendances[]break": attendances_break,
                "attendances[][end_time]": attendances__end_time,
                "attendances[][comment]": attendances__comment,
                "skip_approval": skip_approval,
                "project_id": project_id,
            }
    
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendances[][employee]"]) -> MetaOapg.properties.attendances__employee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendances[][date]"]) -> MetaOapg.properties.attendances__date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendances[][start_time]"]) -> MetaOapg.properties.attendances__start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendances[]break"]) -> MetaOapg.properties.attendances_break: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendances[][end_time]"]) -> MetaOapg.properties.attendances__end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendances[][comment]"]) -> MetaOapg.properties.attendances__comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skip_approval"]) -> MetaOapg.properties.skip_approval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_id"]) -> MetaOapg.properties.project_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attendances[][employee]", "attendances[][date]", "attendances[][start_time]", "attendances[]break", "attendances[][end_time]", "attendances[][comment]", "skip_approval", "project_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendances[][employee]"]) -> MetaOapg.properties.attendances__employee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendances[][date]"]) -> MetaOapg.properties.attendances__date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendances[][start_time]"]) -> MetaOapg.properties.attendances__start_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendances[]break"]) -> MetaOapg.properties.attendances_break: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendances[][end_time]"]) -> typing.Union[MetaOapg.properties.attendances__end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendances[][comment]"]) -> typing.Union[MetaOapg.properties.attendances__comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skip_approval"]) -> typing.Union[MetaOapg.properties.skip_approval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_id"]) -> typing.Union[MetaOapg.properties.project_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attendances[][employee]", "attendances[][date]", "attendances[][start_time]", "attendances[]break", "attendances[][end_time]", "attendances[][comment]", "skip_approval", "project_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        skip_approval: typing.Union[MetaOapg.properties.skip_approval, bool, schemas.Unset] = schemas.unset,
        project_id: typing.Union[MetaOapg.properties.project_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NewAttendancePeriodParametersRequest':
        return super().__new__(
            cls,
            *args,
            skip_approval=skip_approval,
            project_id=project_id,
            _configuration=_configuration,
            **kwargs,
        )
