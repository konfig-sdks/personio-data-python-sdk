# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from personio_data_python_sdk.pydantic.absence_period_breakdown import AbsencePeriodBreakdown
from personio_data_python_sdk.pydantic.absence_type import AbsenceType
from personio_data_python_sdk.pydantic.hourly_absence_period_response_attributes_certificate import HourlyAbsencePeriodResponseAttributesCertificate
from personio_data_python_sdk.pydantic.short_employee import ShortEmployee

class HourlyAbsencePeriodResponseAttributes(BaseModel):
    id: str = Field(alias='id')

    # Period effective duration in minutes
    effective_duration: int = Field(alias='effective_duration')

    employee: ShortEmployee = Field(alias='employee')

    absence_type_id: AbsenceType = Field(alias='absence_type_id')

    certificate: HourlyAbsencePeriodResponseAttributesCertificate = Field(alias='certificate')

    start: datetime = Field(alias='start')

    half_day_start: bool = Field(alias='half_day_start')

    half_day_end: bool = Field(alias='half_day_end')

    origin: Literal["web", "api", "mobile", "slack", "msteams"] = Field(alias='origin')

    status: str = Field(alias='status')

    # ID of the employee who created the absence period.
    created_by: int = Field(alias='created_by')

    created_at: datetime = Field(alias='created_at')

    updated_at: datetime = Field(alias='updated_at')

    # Breakdowns of effective duration by day of absence.
    breakdowns: typing.List[AbsencePeriodBreakdown] = Field(alias='breakdowns')

    measurement_unit: typing.Optional[Literal["minutes"]] = Field(None, alias='measurement_unit')

    end: typing.Optional[typing.Optional[datetime]] = Field(None, alias='end')

    comment: typing.Optional[str] = Field(None, alias='comment')

    approved_at: typing.Optional[typing.Optional[datetime]] = Field(None, alias='approved_at')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
