# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from personio_data_python_sdk.pydantic.absence_period_breakdown import AbsencePeriodBreakdown
from personio_data_python_sdk.pydantic.absence_type import AbsenceType
from personio_data_python_sdk.pydantic.hourly_absence_certificate import HourlyAbsenceCertificate
from personio_data_python_sdk.pydantic.short_employee import ShortEmployee

class HourlyAbsence(BaseModel):
    id: typing.Optional[str] = Field(None, alias='id')

    measurement_unit: typing.Optional[str] = Field(None, alias='measurement_unit')

    # Period effective duration in minutes
    effective_duration: typing.Optional[int] = Field(None, alias='effective_duration')

    employee: typing.Optional[ShortEmployee] = Field(None, alias='employee')

    absence_type: typing.Optional[AbsenceType] = Field(None, alias='absence_type')

    certificate: typing.Optional[HourlyAbsenceCertificate] = Field(None, alias='certificate')

    start: typing.Optional[datetime] = Field(None, alias='start')

    end: typing.Optional[typing.Optional[datetime]] = Field(None, alias='end')

    half_day_start: typing.Optional[bool] = Field(None, alias='half_day_start')

    half_day_end: typing.Optional[bool] = Field(None, alias='half_day_end')

    comment: typing.Optional[str] = Field(None, alias='comment')

    origin: typing.Optional[str] = Field(None, alias='origin')

    status: typing.Optional[str] = Field(None, alias='status')

    timezone: typing.Optional[str] = Field(None, alias='timezone')

    # ID of the employee who created the absence period.
    created_by: typing.Optional[int] = Field(None, alias='created_by')

    created_at: typing.Optional[str] = Field(None, alias='created_at')

    updated_at: typing.Optional[str] = Field(None, alias='updated_at')

    approved_at: typing.Optional[typing.Optional[datetime]] = Field(None, alias='approved_at')

    # Breakdowns of effective duration by day of absence.
    breakdowns: typing.Optional[typing.List[AbsencePeriodBreakdown]] = Field(None, alias='breakdowns')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
