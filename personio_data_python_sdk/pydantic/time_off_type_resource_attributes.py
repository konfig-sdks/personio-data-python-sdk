# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class TimeOffTypeResourceAttributes(BaseModel):
    # identifier
    id: typing.Optional[int] = Field(None, alias='id')

    name: typing.Optional[str] = Field(None, alias='name')

    category: typing.Optional[Literal["family_care", "maternity_parental_leave", "child_care", "short_time_allowance", "quarantine", "lockout", "irrevocable_exemption", "sick_leave", "voluntary_military_service", "unlawful_strike", "lawful_strike", "paid_vacation", "unpaid_vacation", "unexcused_absence", "offsite_work", "other", "undefined"]] = Field(None, alias='category')

    legacy_category: typing.Optional[Literal["family_care_sick_leave", "individual_prohibition_of_employment", "maternity_protection_period", "other", "paid_vacation", "parental_leave", "sick_leave", "lawful_strike", "unlawful_strike", "treatment", "unexcused_absence", "unpaid_vacation", "voluntary_military_service", "offsite_work", "family_care_long_term", "paid_child_sick", "unpaid_child_sick", "undefined"]] = Field(None, alias='legacy_category')

    unit: typing.Optional[Literal["day", "hour"]] = Field(None, alias='unit')

    half_day_requests_enabled: typing.Optional[bool] = Field(None, alias='half_day_requests_enabled')

    certification_required: typing.Optional[bool] = Field(None, alias='certification_required')

    # The timeframe in days under which the employee needs to submit the certification
    certification_submission_timeframe: typing.Optional[int] = Field(None, alias='certification_submission_timeframe')

    substitute_option: typing.Optional[Literal["disabled", "optional", "required"]] = Field(None, alias='substitute_option')

    approval_required: typing.Optional[bool] = Field(None, alias='approval_required')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
