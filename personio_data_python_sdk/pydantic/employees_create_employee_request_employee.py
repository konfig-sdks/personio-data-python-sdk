# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from personio_data_python_sdk.pydantic.employees_create_employee_request_employee_custom_attributes import EmployeesCreateEmployeeRequestEmployeeCustomAttributes

class EmployeesCreateEmployeeRequestEmployee(BaseModel):
    # The e-mail field is required for the employee creation. Updating of this field is not currently supported.
    email: str = Field(alias='email')

    first_name: str = Field(alias='first_name')

    last_name: str = Field(alias='last_name')

    preferred_name: typing.Optional[str] = Field(None, alias='preferred_name')

    gender: typing.Optional[str] = Field(None, alias='gender')

    position: typing.Optional[str] = Field(None, alias='position')

    # The subcompany employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.
    subcompany: typing.Optional[str] = Field(None, alias='subcompany')

    # The department employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.
    department: typing.Optional[str] = Field(None, alias='department')

    # The office employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.
    office: typing.Optional[str] = Field(None, alias='office')

    # Employee hire date. Format: \"yyyy-mm-dd\". If `status` is not provided, it will be set to `active` if the hire date is in the past, or to `onboarding` if it's in the future.
    hire_date: typing.Optional[date] = Field(None, alias='hire_date')

    weekly_working_hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='weekly_working_hours')

    # Status of the employee. Overrides the status determined based on the value of `hire_date`.
    status: typing.Optional[str] = Field(None, alias='status')

    # Employee ID of the Supervisor to be assigned. It needs to belong to a current existing employee, otherwise an error will be returned. If not present, no supervisor will be assigned.
    supervisor_id: typing.Optional[typing.Union[int, float]] = Field(None, alias='supervisor_id')

    custom_attributes: typing.Optional[EmployeesCreateEmployeeRequestEmployeeCustomAttributes] = Field(None, alias='custom_attributes')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
