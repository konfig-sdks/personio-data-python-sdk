# coding: utf-8

"""
    Personnel Data

    API for reading and writing personnel data including data about attendances, absences, documents, etc

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class EmployeesCreateEmployeeRequest1(BaseModel):
    # Employee email
    employee[email]_: str = Field(alias='employee[email]')

    # Employee first name
    employee[first_name]_: str = Field(alias='employee[first_name]')

    # Employee last name
    employee[last_name]_: str = Field(alias='employee[last_name]')

    # Employee preferred name
    employee[preferred_name]_: typing.Optional[str] = Field(None, alias='employee[preferred_name]')

    # Employee gender
    employee[gender]_: typing.Optional[Literal["male", "female", "diverse"]] = Field(None, alias='employee[gender]')

    # Employee position
    employee[position]_: typing.Optional[str] = Field(None, alias='employee[position]')

    # Employee department
    employee[department]_: typing.Optional[str] = Field(None, alias='employee[department]')

    # Employee hire date. Format: yyyy-mm-dd
    employee[hire_date]_: typing.Optional[date] = Field(None, alias='employee[hire_date]')

    # Employee weekly working hours
    employee[weekly_working_hours]_: typing.Optional[typing.Union[int, float]] = Field(None, alias='employee[weekly_working_hours]')

    # Employee ID of the Supervisor to be assigned. It needs to belong to a current existing employee, otherwise an error will be returned. If not present, no supervisor will be assigned.
    employee[supervisor_id]_: typing.Optional[typing.Union[int, float]] = Field(None, alias='employee[supervisor_id]')

    # Employee status
    employee[status]_: typing.Optional[Literal["onboarding", "active", "leave", "inactive"]] = Field(None, alias='employee[status]')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
